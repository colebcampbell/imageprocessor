// Image Processor Main Function
// Reads an image into a 3D array (x, y, color).
// Each pixel is an object consisting of RGB values.
//
// Other functions will be developed to modify and save images.
//
// Konrad Erlends, Cole Campbell
// 2014-11

#include <iostream>
#include <vector>

using namespace std;

// Classes /////////////////////////////////////////////////////////////////////

using namespace std;

class Image {	// Base image class. Stores only generic pixel data.
	friend class BMPImage;
private:
	vector <unsigned char*> pixelData; // Vector of sequentially stored pixels.

public:
	save(fout);
	resize(int x, int y);
};

class BMPImageHeader : private Image {	// BMP specific header data.
private:
	string bfType;
	int bfSize;
	short int bfReserved1;
	short int bfReserved2;
	int bfOffBits;

	int biSize;
	int biWidth;
	int biHeight;
	short int biPlanes;
	short int biBitCount;
	int biCompression;
	int biSizeImage;
	int biXPelsPerMeter;
	int biYPelsPerMeter;
	int biClrUsed;
	int biClrImportant;
};

// Main ////////////////////////////////////////////////////////////////////////


int main (int argc, char* argv[]) { // Needs to be modified to make use of 
                                    // command line arguments.

// Input Argument Setup
    
    for (int i = 0; i < argc; i++) {
        if (argv[i] == "-i") {		// Defines infile.
        	ifstream fin (argv[i+1]);
        }
        if (argv[i] == "-o") {		// Defines outfile.
        	ofstream fout (argv[i+1]);
        }
    }
    



    return 0;
}

// Function to fill pixeldata array ////////////////////////////////////////////

bool fill(ifstream& fin){
	
	if(fin) {
		fin.seekg(0, fin.end);
		int length = fin.tellg();
		fin.seekg(0, fin.beg);
		
		if (buffer != NULL) // Checks for existing file in buffer, and deletes.
		{
			delete buffer;
		}
		
		buffer = new char[length]; // Makes a character array of pixels.
		
		if (buffer != NULL)        // Why have two if statements?
		{
			fin.read(buffer,length);
			fin.close();
			
			cout << "Filling buffer.\n" << endl;
			fin.close();
			
			fin_header = (PBITMAPFILEHEADER)(buffer);
			info_header = (PBITMAPINFOHEADER)(buffer + sizeof(BITMAPFILEHEADER));
			return true;
		}
	}
	return false;
}
